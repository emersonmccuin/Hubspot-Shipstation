const axios = require('axios');

// Store these keys securely
const accessToken = 'HIDDEN';
const shipStationApiKey = 'HIDDEN';
const shipStationApiSecret = 'HIDDEN';

exports.main = async (event, callback) => {
  try {
    const dealProperties = event.inputFields;
    const dealId = event.object.objectId.toString(); // Convert to string for compatibility

    console.log(`Processing deal ID: ${dealId}`);
    const lineItems = await fetchLineItems(dealId);

    const dataPayload = await createShipStationPayload(dealId, dealProperties, lineItems); // Added await

    await sendToShipStation(dataPayload);
    callback(null, "Order successfully created in ShipStation");
  } catch (error) {
    console.error('Error in main function:', error);
    callback(error);
  }
};

async function fetchLineItems(dealId) {
  const lineItemsUrl = `https://api.hubapi.com/crm/v4/objects/deals/${dealId}/associations/line_items`;
  try {
    const response = await axios.get(lineItemsUrl, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log(`Line items for deal ${dealId}:`, JSON.stringify(response.data, null, 2));
    return await Promise.all(response.data.results.map(item => fetchLineItemDetails(item.toObjectId)));
  } catch (error) {
    console.error(`Error fetching line items for deal ${dealId}:`, error.message);
    throw new Error(`Error fetching line items: ${error.message}`);
  }
}

async function fetchLineItemDetails(objectId) {
  const url = `https://api.hubapi.com/crm/v4/objects/line_items/${objectId}?properties=hs_sku,name,quantity,hs_product_id`;
  try {
    const response = await axios.get(url, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    const properties = response.data.properties;
    console.log(`Line item ${objectId} details:`, properties);

    // Check required properties
    if (!properties.hs_product_id || !properties.quantity) {
      throw new Error(`Missing required properties for line item ${objectId}`);
    }

    // Return object with the fetched properties
    return {
      productId: properties.hs_product_id,
      quantity: properties.quantity,
      sku: properties.hs_sku, // SKU might be null if not set in HubSpot
      name: properties.name // Name might be null if not set in HubSpot
    };
  } catch (error) {
    console.error(`Error fetching details for line item ${objectId}:`, error.message);
    throw new Error(`Error fetching line item details: ${error.message}`);
  }
}


async function createShipStationPayload(dealId, dealProperties, lineItemsDetails) {
  try {
    const today = new Date().toISOString().split('T')[0];

    const items = lineItemsDetails.map(details => {
      const { sku, name, quantity } = details;
      console.log(`Processing item - SKU: ${sku}, Name: ${name}, Quantity: ${quantity}`);
      
      if (sku && sku.startsWith('H')) {
        return {
          sku: sku,
          name: name,
          quantity: quantity
        };
      } else {
        return null; // Exclude item if SKU does not start with 'H' or is undefined
      }
    }).filter(item => item !== null); // Filter out null items

    // Construct payload
    const dataPayload = {
      "orderNumber": dealId,
      "orderDate": today,
      "orderStatus": "awaiting_shipment",
      "billTo": {
        "name": "John Doe",
        "company": "Acme Corp",
        "street1": "1234 Street",
        "city": "City",
        "state": "State",
        "postalCode": "12345",
        "country": "US",
        "phone": "111-222-3333",
        "email": "email@example.com"
      },
      "shipTo": {
        "name": dealProperties.recipient_name,
        "street1": dealProperties.street_address_1,
        "city": dealProperties.city,
        "state": dealProperties.state,
        "postalCode": dealProperties.postal_code,
        "country": dealProperties.country,
        "phone": dealProperties.recipient_phone_number,
        "customerEmail": dealProperties.recipient_email
      },
      "items": items
    };

    console.log('Constructed payload for ShipStation:', JSON.stringify(dataPayload, null, 2));
    return dataPayload;
  } catch (error) {
    console.error('Error constructing payload for ShipStation:', error);
    throw error;
  }
}


async function sendToShipStation(dataPayload) {
  console.log('Sending payload to ShipStation:', JSON.stringify(dataPayload, null, 2));

  const encodedCredentials = Buffer.from(`${shipStationApiKey}:${shipStationApiSecret}`).toString('base64');
  const config = {
    method: 'post',
    url: 'https://ssapi.shipstation.com/orders/createorder',
    headers: { 
      'Authorization': `Basic ${encodedCredentials}`,
      'Content-Type': 'application/json'
    },
    data: dataPayload
  };

  try {
    await axios(config);
  } catch (error) {
    console.error(`Error sending payload to ShipStation:`, error.message);
    throw new Error(`Error sending data to ShipStation: ${error.message}`);
  }
}
